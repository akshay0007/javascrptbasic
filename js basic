primitive data type category
undefine
null
boolean
number
string
symbol

1. Using the Object() Constructor

var obj = new Object();
obj.firstName = "Geeks";
obj.middleName = "for";
obj.lastName = "Geeks";
obj.isTeaching = "Javascipt";
obj.greet = function() { console.log("Hi"); }

2.Using Object literal

var obj = {} //obj is an empty object
obj.firstName = "Geeks";
obj.middleName = "for";
obj.lastName = "Geeks";
obj.isTeaching = "Javascipt";
obj.greet = function() { console.log("Hi"); }

3. Directly specifying the values

var obj = { 
    obj.firstName = "Geeks";
    obj.middleName = "for";
    obj.lastName = "Geeks";
    obj.isTeaching = "Javascipt";
    obj.greet = function() { console.log("Hi"); }
}

typecasting in js called Coercion
Coercion: What we call typecasting in C, C++, Java, it is called coercion in JavaScript.

var x = 42;
var explicit = String(x);

var x = 42;
var implicit = x + " "; 

Hoisting: – Function definitions are hoisted but not variable declarations. This means that when a function is declared, it is usable from anywhere within your code.

bind, call and apply
bind(), call() and apply() are all used to modify the context of a function. All three of these help explicitly specify what the value of this should be inside a function.
But, there are certain differences in how each of them work. Let us study these differences.

fruits.call(banana, 'yummy')
fruits.apply(orange, [ 'sour' ])


However, one major difference between them and bind() is that call() and apply() immediately calls the function, as opposed to simply preparing a copy of the function with a bound this value for future use.
maps and sets::

JavaScript | ‘===’ vs ‘==’Comparision Operator::
In JavaScript, ‘===’ Operator is used to check whether 2 entities are of equal values as well as of equal size and provides a boolean result.

The == operator will compare for equality after doing any necessary type conversions. The === operator will not do any conversion before comparing, so if two values are not of the same type, === will simply return false.


function functionname[...parameters]//... is the rest operator

JavaScript | Rest Operator
JavaScript | Spread Operator

Arrow operator in ES6 of JavaScript
examples::
Const functionName = (arg1, arg2 ….) => {
    // body of function
}

tradition way::
Function functionName(arg1, arg2….)
{
    // body of function
}

